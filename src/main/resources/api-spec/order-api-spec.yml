openapi: 3.0.0
info:
  title: Order API
  description: API for managing order data
  version: 1.0.0

paths:
  /api/v1/orders:
    get:
      summary: Get all orders
      tags:
        - Orders
      responses:
        '200':
          description: List of all orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseListDto'
    post:
      summary: Create a new order
      tags:
        - Orders
      requestBody:
        description: Order data to create a new order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreationDto'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/orders/{id}:
    get:
      summary: Get order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to retrieve
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to update
      requestBody:
        description: Updated order data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreationDto'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to delete
      responses:
        '204':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: null
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    OrderCreationDto:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: ID of the product to order
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the product ordered
        customerReference:
          type: string
          description: Reference of the customer making the order

    OrderResponseDto:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
          description: Unique identifier of the order
        productId:
          type: string
          format: uuid
          description: ID of the product ordered
        quantity:
          type: integer
          description: Quantity of the product ordered
        customerReference:
          type: string
          description: Reference of the customer who made the order
        status:
          type: string
          description: Current status of the order
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp of the order

    OrderResponseListDto:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponseDto'

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "400"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ParamsViolationDetails'

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: URI reference identifying the error type
        title:
          type: string
          description: A short description of the error
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Detailed description of the error

    ParamsViolationDetails:
      type: object
      properties:
        fieldName:
          type: string
          description: Field where validation error occurred
        reason:
          type: string
          description: Reason for the validation error
